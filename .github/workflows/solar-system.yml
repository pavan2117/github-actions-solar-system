name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        container: 
          image: node:20
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v4
        #   with:
        #     node-version: 20
        
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: code coverage
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: 18
    
        - name: Install Dependencies
          run: npm install
    
        - name: Testing code coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive code coverage
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
      name: docker
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: ghcr login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
      
        - name: Build and push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: 'ghcr.io/${{ github.repository_owner}}/solar-system:${{github.sha}}'

    dev-deploy:
      name: dev-deploy
      runs-on: ubuntu-latest
      needs: docker
      environment: 
        name: development
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: install kubectl
          uses: azure/setup-kubectl@v3
          with:
            version: v1.26.0

        - name: set kubeconfig context
          uses: azure/k8s-set-context@v3    
          with:
            method: kubeconfig
            kubeconfig: '${{ secrets.KUBECONFIG }}'

        - name: checking kubectl version
          run: |
            kubectl version --short -o yaml
            kubectl get nodes
        
        - name: Assigning ING-IP to GIT_ENV
          id: ingress-ip
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> "$GITHUB_ENV"
            echo "Ingress ip is= $INGRESS_IP"

        - name: replacing placeholder
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            CDN: https://somecdn.com/...
            NAMESPACE: ${{vars.NAMESPACE}}
            REPLICAS: ${{vars.REPLICAS}}
            IMAGE: ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}
            INGRESS_IP: ${{github.env.INGRESS_IP}}

        - name: checking file
          run: cat kubernetes/development/*.yaml